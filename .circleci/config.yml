version: 2.1
orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.4

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible

jobs:
  hadolint:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Test code indentation
          command: |
              cd django_project
              make lint

## DEPLOY INFRASTRUCTURE
  terraform-init:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: Terraform init
          command: |
            cd infra_prov_with_terraform
            terraform init -input=false
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform plan
          command: |
            cd infra_prov_with_terraform
            terraform plan -out tfapply 
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform apply
          command: |
            cd infra_prov_with_terraform
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
      
  terraform-plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd infra_prov_with_terraform
            terraform plan -destroy -out tfdestroy 
          when: on_fail
      - persist_to_workspace:
          root: .
          paths:
            - .
   

  terraform-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd infra_prov_with_terraform
            terraform apply -auto-approve tfdestroy
          when: on_fail

# CONFIGURE INFRASTRUCTURE
  container-configurations:
    docker:
      - image: cimg/python:3.10
    steps: 
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["56:a1:e8:28:97:7e:ea:fc:4f:6d:f7:03:95:a8:58:5d"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.1 container-configurations.yml

  build:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout

      - run:
        # installs a docker client that will be used to run the docker commands
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin

#       - run:
#           name: Install Docker Compose
#           environment:
#             COMPOSE_VERSION: '1.29.2'
#           command: |
#             curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
#             chmod +x ~/docker-compose
#             sudo mv ~/docker-compose /usr/local/bin/docker-compose
      
      - setup_remote_docker

      - run:
          name: Build Docker image
          command: |
            cd django_project  
            docker build -t django_project-app .
            # docker-compose --project app up -d
            # docker-compose -p app up --build -d

      - run:
          name: Push to Docker Hub
          command: |
            cd django_project
            # Assumes that an image is built via `run_docker-compose.sh`

            # Step 1:
            # Create dockerpath
            dockerpath=django_project-app

            # Step 2:  
            # Authenticate & tag
            echo "Docker ID and Image: $dockerpath"
            docker login -u $DOCKER_USER $DOCKER_PASS

            #Step 3:
            # Tag the images with your Docker ID
            docker tag $dockerpath:latest maiempire/$dockerpath

            # Step 4:
            # Push image to a docker repository
            docker push maiempire/$dockerpath
workflows:
  version: 2
  django-deployment:
    jobs:
      - terraform-init
      - terraform-plan:
          requires: ["terraform-init"]
      - terraform-apply:
          requires: ["terraform-plan"]
      # - terraform-plan-destroy:
      #     requires: ["terraform-appy"]
      # - terraform-destroy:
      #     requires: ["terraform-plan-destroy"]  
#       - build          
