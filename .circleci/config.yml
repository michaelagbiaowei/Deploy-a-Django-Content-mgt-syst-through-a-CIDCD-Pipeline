version: 2.1
orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.4

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  delete-all-pods:
    description: Delete all pods
    steps:
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            # sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" kubernetes_django/db/*yml
            kubectl delete --all pods
            kubectl delete --all services
          when: on_fail

  terraform-plan-destroy:
    description: Delete infrastructure
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd infra_prov_with_terraform
            terraform plan -destroy -out tfdestroy
          when: on_fail

  terraform-destroy:
    description: Delete infrastructure
    steps:
      - run:
          name: terraform destroy
          command: |
            cd infra_prov_with_terraform
            terraform apply -auto-approve tfdestroy
          when: on_fail

  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd-pipeline
          template: basic_fail_1

  # install_nodejs:
  #   description: Install Node.js 13.8.0
  #   steps:
  #     - run:
  #         name: Install Node.js 13.8.0
  #         command: |
  #           # Install Node.js LTS version as our base Node.js version
  #           curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
  #           sudo apt install -y nodejs
  #           # Use n version manager to use Node.js v13.8.0
  #           sudo npm install --global n
  #           sudo n 13.8.0

  # destroy-environment:
  #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #   steps:
  #     - run:
  #         name: Destroy environments
  #         when: on_fail
  #         command: |
  #           aws cloudformation delete-stack --stack-name circleci

jobs:
  # NUM_WORKER_NODES=3
  # WORKER_NODES_INSTANCE_TYPE=t2.medium
  # STACK_NAME=circleci
  # KEY_PAIR_NAME=dev
  # aws cloudformation deploy \
  #   "$@" \
  #   --template-file cloudformation/aws-eks.yml \
  #   --capabilities CAPABILITY_IAM \
  #   --stack-name "$STACK_NAME" \
  #   --parameter-overrides \
  #       KeyPairName="$KEY_PAIR_NAME" \
  #       NumWorkerNodes="$NUM_WORKER_NODES" \
  #       WorkerNodesInstanceType="$WORKER_NODES_INSTANCE_TYPE"

  # CODE CHECKS
  # build nodejs applicaton for deployment IF specified in the build property of your package.json file
  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build node-app
          command: |
            cd node-project
            npm install
            npm run build
      - notify_on_failure

  # test application functionalities IF specified in the test property of your package.json file
  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test node-app
          command: |
            cd node-project
            npm install
            npm run test
      - notify_on_failure

  # scan codebase for dependency vulnerabilities IF specified in the scan property of your package.json file
  scan:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan frontend
          command: |
            cd node-project
            npm install
            npm audit fix --force
            npm audit fix
            npm install --save-dev html-webpack-plugin@5.5.0
            npm update js-yaml --depth 4
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify_on_failure

  ### PROVISION INFRASTRUCTURE
  # initialize the working directory containing Terraform configuration files
  terraform-init:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: Terraform init
          command: |
            cd infra_prov_with_terraform
            terraform init -input=false
      - persist_to_workspace:
          root: .
          paths:
            - .
      - notify_on_failure

  # execute the actions proposed
  terraform-plan:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform plan
          command: |
            cd infra_prov_with_terraform
            terraform plan -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
      - notify_on_failure

  # execute the actions proposed in a Terraform plan.
  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform apply
          command: |
            cd infra_prov_with_terraform
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
      - terraform-plan-destroy
      - terraform-destroy
      - notify_on_failure

  # BUILD APPLICATION
  # build nodejs application into docker image before shipping out to AWS EKS cluster
  containerize-nodejs-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            cd node-project  
            docker build -t nodejs .

      - run:
          name: Push to Docker Hub
          command: |
            cd node-project
            echo "$DOCKER_PASSWORD"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag $APP:latest $DOCKER_USERNAME/$APP
            docker push $DOCKER_USERNAME/$APP
      - notify_on_failure

  # DEPLOY APPLICATION
  # ship out nodejs microservices kubernetes manifest files to AWS EKS cluster
  ship-out-nodejs-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
            kubectl apply -f kubernetes_nodejs/
            kubectl get pods
            kubectl get services
      - delete-all-pods
      - terraform-plan-destroy
      - terraform-destroy
      - notify_on_failure

  # deploy sock shop microservices kubernetes manifest files to AWS EKS cluster
  deploy-sock-shop:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl, Install kubectl, Configure kubectl and deploy sock shop manifest files to AWS EKS cluster
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
            kubectl create namespace sock-shop
            kubectl apply -f kubernetes_sock-shop/
      - delete-all-pods
      - terraform-plan-destroy
      - terraform-destroy
      - notify_on_failure

  # deploy monitoring and visualization microservices manifest files to AWS EKS cluster
  deploy-prometheus:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl, Configure kubectl and deploy prometheus manifest files to AWS EKS cluster
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
            kubectl apply -f kubernetes_sock-shop/manifests-monitoring/
      - delete-all-pods
      - terraform-plan-destroy
      - terraform-destroy
      - notify_on_failure

  # report succesful deployment status to development and operation (DevOps) team
  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: cicd-pipeline
          template: success_tagged_deployment_1

workflows:
  version: 2
  nodejs-deployment:
    jobs:
      ######################################
      #       DEPLOY ON TEST BRANCH        #
      ######################################
      - build:
          filters:
            branches:
              only: [Cloud-DevOps]
      - test:
          requires:
            - "build"
          filters:
            branches:
              only: [Cloud-DevOps]
      - scan:
          requires:
            - "build"
            - "test"
          filters:
            branches:
              only: [Cloud-DevOps]
      ######################################
      #       DEPLOY ON MAIN BRANCH        #
      ######################################
      - terraform-init:
          requires: [build, test, scan]
          filters:
            branches:
              only: [main]
      - terraform-plan:
          requires: ["terraform-init"]
          filters:
            branches:
              only: [main]
      - hold-apply:
          type: approval
          requires: ["terraform-plan"]
      - terraform-apply:
          requires: [hold-apply]
          filters:
            branches:
              only: [main]
      # - deploy-infrastructure
      - hold-deployment:
          type: approval
          requires: [terraform-apply]
          filters:
            branches:
              only: [main]
      - containerize-nodejs-app:
          requires: [hold-deployment]
          filters:
            branches:
              only: [main]
      - ship-out-nodejs-app:
          requires: [containerize-nodejs-app]
          filters:
            branches:
              only: [main]
      - deploy-sock-shop:
          requires: [containerize-nodejs-app]
          filters:
            branches:
              only: [main]
      - deploy-prometheus:
          requires: [containerize-nodejs-app]
          filters:
            branches:
              only: [main]
