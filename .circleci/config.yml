version: 2.1
orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.4

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  # install_nodejs:
  #   description: Install Node.js 13.8.0
  #   steps:
  #     - run:
  #         name: Install Node.js 13.8.0
  #         command: |
  #           # Install Node.js LTS version as our base Node.js version
  #           curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
  #           sudo apt install -y nodejs
  #           # Use n version manager to use Node.js v13.8.0
  #           sudo npm install --global n
  #           sudo n 13.8.0

  # notify_on_failure:
  #   steps:
  #     - slack/notify:
  #         event: fail
  #         channel: cicd-pipeline
  #         template: basic_fail_1

  # destroy-environment:
  #   description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
  #   steps:
  #     - run:
  #         name: Destroy environments
  #         when: on_fail
  #         command: |
  #           aws cloudformation delete-stack --stack-name circleci

jobs:
  ## DEPLOY INFRASTRUCTURE
  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - install_nodejs
  #     - run:
  #         name: Install tar utility
  #         command: |
  #           yum install -y tar gzip
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |

  # NUM_WORKER_NODES=3
  # WORKER_NODES_INSTANCE_TYPE=t2.medium
  # STACK_NAME=circleci
  # KEY_PAIR_NAME=dev
  # aws cloudformation deploy \
  #   "$@" \
  #   --template-file cloudformation/aws-eks.yml \
  #   --capabilities CAPABILITY_IAM \
  #   --stack-name "$STACK_NAME" \
  #   --parameter-overrides \
  #       KeyPairName="$KEY_PAIR_NAME" \
  #       NumWorkerNodes="$NUM_WORKER_NODES" \
  #       WorkerNodesInstanceType="$WORKER_NODES_INSTANCE_TYPE"

  terraform-init:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: Terraform init
          command: |
            cd infra_prov_with_terraform
            terraform init -input=false
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform plan
          command: |
            cd infra_prov_with_terraform
            terraform plan -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Terraform apply
          command: |
            cd infra_prov_with_terraform
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            cd infra_prov_with_terraform
            terraform plan -destroy -out tfdestroy
      - persist_to_workspace:
          root: .
          paths:
            - .

  terraform-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            cd infra_prov_with_terraform
            terraform apply -auto-approve tfdestroy

  build-django-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout

      - run:
          # installs a docker client that will be used to run the docker commands
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin

      - setup_remote_docker

      - run:
          name: Build Docker image
          command: |
            cd django_project  
            docker build -t django_project-app .

      - run:
          name: Push to Docker Hub
          command: |
            cd django_project
            echo "$DOCKER_PASSWORD"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker tag $APP:latest $DOCKER_USERNAME/$APP
            docker push $DOCKER_USERNAME/$APP

      # - notify_on_failure
      # - destroy-environment

  deploy-django-app:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" kubernetes_django/db/*yml
            kubectl apply -f kubernetes_django/db/
            kubectl get pods
            kubectl get services

      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" kubernetes_django/django/*yml
            kubectl apply -f kubernetes_django/django/
            kubectl get pods
            kubectl get services

      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" kubernetes_django/celery/*yml
            kubectl apply -f kubernetes_django/celery/
            kubectl get pods
            kubectl get services

      # - notify_on_failure
      # - destroy-environment

  deploy-sock-shop:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" kubernetes_sock-shop/*yaml
            kubectl create namespace sock-shop
            kubectl apply -f kubernetes_sock-shop/

      # - notify_on_failure
      # - destroy-environment

  deploy-prometheus:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Configure kubectl
          command: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
      - run:
          name: Deploy Docker image to EKS cluster
          command: |
            sed -i "s|IMAGE|$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_USERNAME/$APP:latest|g" kubernetes_sock-shop/manifests-monitoring/*yaml
            kubectl apply -f kubernetes_sock-shop/manifests-monitoring/

      # - notify_on_failure
      # - destroy-environment

workflows:
  version: 2
  django-deployment:
    jobs:
      # - terraform-init
      # - terraform-plan:
      #     requires: ["terraform-init"]
      # - hold-apply:
      #     type: approval
      #     requires: ["terraform-plan"]
      # - terraform-apply:
      #     requires: ["hold-apply"]
      # - terraform-plan-destroy:
      #     requires: ["terraform-apply"]
      # - hold-destroy:
      #     type: approval
      #     requires: ["terraform-plan-destroy"]
      # - terraform-destroy:
      #     requires: ["hold-destroy"]
      # # - deploy-infrastructure
      # - build-django-app:
      #     requires: [terraform-apply]
      - deploy-django-app
      #     requires: [build-django-app]
      # - deploy-sock-shop:
      #     requires: [build-django-app]
      # - deploy-prometheus:
      #     requires: [build-django-app]
